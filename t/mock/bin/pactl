#!/usr/bin/env perl

use strict;
use autodie;

my $state = 't/mock/bin/pactl-state';
my $volume;
my $mute;
read_state();

sub write_state
{
	open my $fh, '>', $state;
	print {$fh} join "\n", $volume, $mute;
}

sub reset_state
{
	$volume = 50;
	$mute = 0;
	write_state;
}

sub read_state
{
	if (!-e $state) {
		reset_state;
	}
	else {
		open my $fh, '<', $state;
		($volume, $mute) = readline $fh;
		chomp($volume, $mute);
	}
}

if ($ARGV[0] eq 'info') {
	reset_state;
	print 'ready to mock';
}
elsif ($ARGV[0] eq 'get-sink-volume' && $ARGV[1] eq '@DEFAULT_SINK@') {
	print "volume is $volume%, I repeat, $volume%";
}
elsif ($ARGV[0] eq 'set-sink-volume' && $ARGV[1] eq '@DEFAULT_SINK@' && defined $ARGV[2]) {
	my $arg = $ARGV[2];
	$arg =~ tr/%//;
	$volume += $arg;
	write_state;
}
elsif ($ARGV[0] eq 'get-sink-mute' && $ARGV[1] eq '@DEFAULT_SINK@') {
	print "yessir, mute status is " . ($mute ? 'yes' : 'no');
}
elsif ($ARGV[0] eq 'set-sink-mute' && $ARGV[1] eq '@DEFAULT_SINK@' && defined $ARGV[2]) {
	my $arg = $ARGV[2];
	if ($arg eq 'toggle') {
		$mute = !$mute;
	}
	else {
		$mute = !!$arg;
	}
	write_state;
}
else {
	die 'no idea how to handle that';
}

