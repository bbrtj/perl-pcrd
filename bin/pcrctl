#!/usr/bin/perl

use v5.14;
use strict;
use Getopt::Long;
use Pod::Usage;

my $help = !!0;
GetOptions(
	'h|help' => \$help,
) or pod2usage(2);

pod2usage(-exitval => 0, -verbose => 2, -noperldoc => 1) if $help;

sub run_query
{
	my ($module, $feature, $value) = @_;

	require PCRD::Client::Query;
	require IO::Async::Loop;
	my $loop = IO::Async::Loop->new;
	my $client = PCRD::Client::Query->new(
		on_message => sub {
			my ($ok, $result) = @_;
			$loop->stop;

			die "failed to execute: $result\n"
				unless $ok;
			say $result;
		},
	);

	$client->start($loop);
	$client->send($module, $feature, $value);
	$loop->run;
}

my $action = shift;

if ($action eq 'config') {
	require PCRD;
	say PCRD->new->explain_config;
}
elsif ($action) {
	my ($feature, $value) = @ARGV;
	if ($action eq '_') {
		require PCRD;
		$action = PCRD->new->find_feature_module($feature);
	}

	run_query($action, $feature, $value);
}
else {
	die "Need an action\n";
}

__END__

=head1 NAME

pcrctl - Control program for Parameters Control and Reporting Daemon

=head1 SYNOPSIS

pcrctl [options] [action]

	Options:
		--help                          show help

	Actions:
		config                          shows possible configuration values
		MODULE FEATURE [VALUE]          queries one of the daemon's features

=head1 OPTIONS

=over

=item B<--help>

Print a brief help message and exits.

=back

=head1 ACTIONS

=over

=item B<config>

Show a complete list of configuration values for enabled modules.

=item B<MODULE>

Runs a query to the daemon, setting or getting one of the values. C<MODULE> and
C<FEATURE> configs are required, existence of C<VALUE> controls whether the
setting or getting is performed.

Instead of C<MODULE>, C<_> can be used, which will try to guess C<MODULE> based
of C<FEATURE>. Execution will fail if C<FEATURE> is not unique within the
system.

=back

=head1 DESCRIPTION

This program is a pcrd (Parameters Control and Reporting Daemon) control tool.
It can be used to query its modules.

